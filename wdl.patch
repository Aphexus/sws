--- wdlstring.h	Mon Jan 19 16:26:36 1970
+++ wdlstring.h	Mon Jan 19 16:26:36 1970
@@ -1,7 +1,7 @@
 /*
     WDL - wdlstring.h
     Copyright (C) 2005 and later, Cockos Incorporated
-  
+
     This software is provided 'as-is', without any express or implied
     warranty.  In no event will the authors be held liable for any damages
     arising from the use of this software.
@@ -17,7 +17,7 @@
     2. Altered source versions must be plainly marked as such, and must not be
        misrepresented as being the original software.
     3. This notice may not be removed or altered from any source distribution.
-      
+
 */
 
 /*
@@ -27,7 +27,10 @@
   operator overloading. It uses a WDL_HeapBuf for internal storage.
 
   You can do Set, Get, Append, Insert, and SetLen.. that's about it
-  
+
+  Optionnal WDL_STRING_FAST ifdef: good for large strings & repetitive processing.
+  When defined, this will avoid many calls to strlen() but the string's length
+  must not be changed 'manually' (use SetLen(7) rather than Get()[8]=0, etc..)
 */
 
 #ifndef _WDL_STRING_H_
@@ -37,22 +40,48 @@
 #include <stdio.h>
 #include <stdarg.h>
 
+
+#ifndef WDL_STRING_INTF_ONLY
+static int strminlen(const char* str, int n)
+{
+  if (n > 0) {
+    const char* p = str;
+    while (p-str < n && *p) ++p;
+    return (int)(p-str);
+  }
+  return (int)strlen(str);
+}
+#endif
+
+
 #ifndef WDL_STRING_IMPL_ONLY
 class WDL_String
 {
 public:
   WDL_String(int hbgran) : m_hb(hbgran WDL_HEAPBUF_TRACEPARM("WDL_String(4)"))
+#ifdef WDL_STRING_FAST
+  , m_length(0)
+#endif
   {
   }
   WDL_String(const char *initial=NULL, int initial_len=0) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String"))
+#ifdef WDL_STRING_FAST
+  , m_length(0)
+#endif
   {
     if (initial) Set(initial,initial_len);
   }
   WDL_String(WDL_String &s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(2)"))
+#ifdef WDL_STRING_FAST
+  , m_length(0)
+#endif
   {
     Set(s.Get());
   }
   WDL_String(WDL_String *s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(3)"))
+#ifdef WDL_STRING_FAST
+  , m_length(0)
+#endif
   {
     if (s && s != this) Set(s->Get());
   }
@@ -76,26 +105,22 @@
   {
     // this would be ideal
     //int s = (maxlen ? strnlen(str, maxlen) : strlen(str));
-
-    int s;
-    if (maxlen)
-    {    
-      const char* p=str;
-      while (p-str < maxlen && *p) ++p;
-      s=(int) (p-str);
-    }
-    else
+    int s = strminlen(str, maxlen);
+    if (!s && !m_hb.GetSize())
     {
-      s=(int)strlen(str);
+#ifdef WDL_STRING_FAST
+      m_length = 0;
+#endif
+      return; // do nothing if setting to empty and not allocated
     }
-     
-    if (!s && !m_hb.GetSize()) return; // do nothing if setting to empty and not allocated
 
-    char *newbuf=(char*)m_hb.Resize(s+1,false);
-    if (newbuf) 
+    if (char* newbuf=(char*)m_hb.Resize(s+1,false)) 
     {
       memcpy(newbuf,str,s);
       newbuf[s]=0;
+#ifdef WDL_STRING_FAST
+      m_length = s;
+#endif
     }
   }
 #endif
@@ -110,17 +135,17 @@
     =0)
 #endif
   {
-    int s=(int)strlen(str);
-    if (maxlen && s > maxlen) s=maxlen;
-    if (!s) return; // do nothing if setting to empty and not allocated
+    int s = strminlen(str, maxlen);
+    if (!s) return;
 
-    int olds=(int)strlen(Get());
-
-    char *newbuf=(char*)m_hb.Resize(olds + s + 1,false);
-    if (newbuf)
+    int olds=GetLength();
+    if (char* newbuf=(char*)m_hb.Resize(olds+s+1,false))
     {
       memcpy(newbuf + olds, str, s);
       newbuf[olds+s]=0;
+#ifdef WDL_STRING_FAST
+      m_length += s;
+#endif
     }
   }
 #endif
@@ -133,12 +158,15 @@
 	  char *p=Get();
 	  if (!p || !*p) return;
 
-	  int l=(int)strlen(p);
+	  int l=GetLength();
 	  if (position < 0 || position >= l) return;
 	  if (position+len > l) len=l-position;
 	  memmove(p+position,p+position+len,l-position-len+1); // +1 for null
-  }
+#ifdef WDL_STRING_FAST
+	  m_length -= len;
 #endif
+}
+#endif
 
   void WDL_STRING_PREFIX Insert(const char *str, int position, int maxlen
 #ifdef WDL_STRING_INTF_ONLY
@@ -150,18 +178,21 @@
     =0)
 #endif
   {
-	  int sl=(int)strlen(Get());
-	  if (position > sl) position=sl;
+    int sl=GetLength();
+    if (position > sl) position=sl;
 
-	  int ilen=(int)strlen(str);
-	  if (maxlen > 0 && maxlen < ilen) ilen=maxlen;
+    int ilen=strminlen(str,maxlen);
+    if (!ilen) return;
 
-	  Append(str);
-	  char *cur=Get();
-
-      	  memmove(cur+position+ilen,cur+position,sl-position);
-	  memcpy(cur+position,str,ilen);
-	  cur[sl+ilen]=0;
+    if (char* newbuf=(char*)m_hb.Resize(sl+ilen+1,false))
+    {
+      memmove(newbuf+position+ilen,newbuf+position,sl-position);
+      memcpy(newbuf+position,str,ilen);
+      newbuf[sl+ilen]=0;
+#ifdef WDL_STRING_FAST
+      m_length += ilen;
+#endif
+    }
   }
 #endif
 
@@ -175,8 +206,13 @@
     =false)
 #endif
   {                       // can use to resize down, too, or resize up for a sprintf() etc
-    char *b=(char*)m_hb.Resize(length+1,resizeDown);
-    if (b) b[length]=0;
+    if (char* b=(char*)m_hb.Resize(length+1,resizeDown))
+    {
+      b[length]=0;
+#ifdef WDL_STRING_FAST
+      m_length = (length < m_length ? length : m_length); // string len != allocation size
+#endif
+    }
   }
 #endif
 
@@ -185,55 +221,74 @@
     ; 
 #else
   {
-    char* b= (char*) m_hb.Resize(maxlen+1,false);
-  	va_list arglist;
-		va_start(arglist, fmt);
-    #ifdef _WIN32
-		int written = _vsnprintf(b, maxlen, fmt, arglist);
-    #else
-		int written = vsnprintf(b, maxlen, fmt, arglist);
-    #endif
-    if (written < 0) written = 0;
-		va_end(arglist);
-    b[written] = '\0';
-	}
+    if (char* b=(char*)m_hb.Resize(maxlen+1,false))
+    {
+      va_list arglist;
+      va_start(arglist, fmt);
+#ifdef _WIN32
+      int written = _vsnprintf(b, maxlen, fmt, arglist);
+#else
+      int written = vsnprintf(b, maxlen, fmt, arglist);
 #endif
+      if (written < 0) written = 0;
+      va_end(arglist);
+      b[written] = '\0';
+#ifdef WDL_STRING_FAST
+      m_length = written;
+#endif
+    }
+  }
+#endif
 
   void WDL_STRING_PREFIX AppendFormatted(int maxlen, const char* fmt, ...) 
 #ifdef WDL_STRING_INTF_ONLY
     ; 
 #else
   {
-    int offs=(int)strlen(Get());
-    char* b= (char*) m_hb.Resize(offs+maxlen+1,false)+offs;
-  	va_list arglist;
-		va_start(arglist, fmt);
-    #ifdef _WIN32
-		int written = _vsnprintf(b, maxlen, fmt, arglist);
-    #else
-		int written = vsnprintf(b, maxlen, fmt, arglist);
-    #endif
-    if (written < 0) written = 0;
-		va_end(arglist);
-    b[written] = '\0';
-	}
+    int offs=GetLength();
+    if (char* b=(char*)m_hb.Resize(offs+maxlen+1,false)+offs)
+    {
+      va_list arglist;
+      va_start(arglist, fmt);
+#ifdef _WIN32
+      int written = _vsnprintf(b, maxlen, fmt, arglist);
+#else
+      int written = vsnprintf(b, maxlen, fmt, arglist);
 #endif
+      if (written < 0) written = 0;
+      va_end(arglist);
+      b[written] = '\0';
+#ifdef WDL_STRING_FAST
+      m_length += written;
+#endif
+    }
+  }
+#endif
 
   void WDL_STRING_PREFIX Ellipsize(int minlen, int maxlen)
 #ifdef WDL_STRING_INTF_ONLY
     ;
 #else
   {
-    char* b = Get();
-    if ((int) strlen(b) > maxlen) {
+    if (GetLength() > maxlen)
+    {
+      char* b = Get();
       int i;
       for (i = maxlen-4; i >= minlen; --i) {
         if (b[i] == ' ') {
           strcpy(b+i, "...");
+#ifdef WDL_STRING_FAST
+          m_length = i+3;
+#endif
           break;
         }
       }
-      if (i < minlen) strcpy(b+maxlen-4, "...");    
+      if (i < minlen && maxlen > 4) {
+        strcpy(b+maxlen-4, "...");
+#ifdef WDL_STRING_FAST
+        m_length = maxlen-1;
+#endif
+      }
     }
   }
 #endif
@@ -244,13 +299,27 @@
     char *p=NULL;
     if (m_hb.GetSize()) p=(char *)m_hb.Get();
     if (p) return p;
+
+#ifdef WDL_STRING_FAST
+    m_length=0;
+#endif
     static char c; c=0; 
     return &c; // don't return "", in case it gets written to.
   }
-  int GetLength() { return (int)strlen(Get()); }
 
+  int GetLength() {
+#ifdef WDL_STRING_FAST
+  return (m_hb.GetSize()?m_length:0);
+#else
+  return (int)strlen(Get());
+#endif
+}
+
   private:
     WDL_HeapBuf m_hb;
+#ifdef WDL_STRING_FAST
+    int m_length;
+#endif
 };
 #endif
 
--- swell/swell-ini.cpp	Mon Jan 19 16:26:36 1970
+++ swell/swell-ini.cpp	Mon Jan 19 16:26:36 1970
@@ -168,7 +168,15 @@
         {
           *t++=0;
           if (*p) 
+		  {
+			// Mimic Win32 behavior of stripping quotes and whitespace
+			while(*t==' ' || *t=='\t') ++t;
+			char* e = t+strlen(t)-1;
+			while(e >= t && (*e==' ' || *e=='\t')) --e;
+			if (e > t && ((*t=='\"' && *e=='\"') || (*t=='\'' && *e=='\''))) { ++t; --e; }
+			e[1] = 0;
             cursec->AddUnsorted(p,strdup(t));
+		  }
         }
       }
     }
@@ -314,7 +322,7 @@
   int szOut=0;
   WDL_StringKeyedArray<char *> *cursec = ctx ? ctx->m_sections.Get(appname) : NULL;
 
-  if (ctx) 
+  if (ctx && cursec) 
   {
     int x;
     for(x=0;x<cursec->GetSize();x++)
--- wingui/virtwnd-controls.h	Mon Jan 19 16:26:36 1970
+++ wingui/virtwnd-controls.h	Mon Jan 19 16:26:36 1970
@@ -114,7 +114,9 @@
     void SetForceText(bool ft, int color=0) { m_forcetext=ft; m_forcetext_color=color; }
     bool GetForceText() { return m_forcetext; }
 
+    // JFB for SWS:
+    LICE_IFont* GetFont() { return m_textfont; }
     void SetFont(LICE_IFont *font, LICE_IFont *vfont=NULL) { m_textfont=font; m_textfontv=vfont; }
 
   private:
 
