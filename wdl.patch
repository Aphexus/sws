--- wdlstring.h	Mon Jan 19 16:26:36 1970
+++ wdlstring.h	Mon Jan 19 16:26:36 1970
@@ -48,13 +48,13 @@
   {
     if (initial) Set(initial,initial_len);
   }
-  WDL_String(WDL_String &s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(2)"))
+  WDL_String(const WDL_String &s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(2)"))
   {
-    Set(s.Get());
+    Set(&s);
   }
-  WDL_String(WDL_String *s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(3)"))
+  WDL_String(const WDL_String *s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(3)"))
   {
-    if (s && s != this) Set(s->Get());
+    if (s && s != this) Set(s);
   }
   ~WDL_String()
   {
@@ -74,29 +74,46 @@
     =0)
 #endif
   {
-    // this would be ideal
-    //int s = (maxlen ? strnlen(str, maxlen) : strlen(str));
+    int s=0;
+    if (maxlen) while (s < maxlen && str[s]) s++;
+    else s=(int)strlen(str);
+    
+    if (!s && !m_hb.GetSize()) return; // do nothing if setting to empty and not allocated
 
-    int s;
-    if (maxlen)
-    {    
-      const char* p=str;
-      while (p-str < maxlen && *p) ++p;
-      s=(int) (p-str);
-    }
-    else
+    char *newbuf=(char*)m_hb.Resize(s+1,false);
+    if (m_hb.GetSize()==s+1) 
     {
-      s=(int)strlen(str);
+      memcpy(newbuf,str,s);
+      newbuf[s]=0;
     }
-     
+  }
+#endif
+
+  void WDL_STRING_PREFIX Set(const WDL_String *str, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    int s = str->GetLength();
+    if (maxlen && maxlen<s) s=maxlen;
+    
     if (!s && !m_hb.GetSize()) return; // do nothing if setting to empty and not allocated
 
     char *newbuf=(char*)m_hb.Resize(s+1,false);
-    if (newbuf) 
+    if (m_hb.GetSize()==s+1) 
     {
-      memcpy(newbuf,str,s);
+      memcpy(newbuf,str->Get(),s);
       newbuf[s]=0;
     }
+#else
+    Set(str->Get(), maxlen); // might be faster: "partial" strlen
+#endif
   }
 #endif
 
@@ -110,14 +127,15 @@
     =0)
 #endif
   {
-    int s=(int)strlen(str);
-    if (maxlen && s > maxlen) s=maxlen;
-    if (!s) return; // do nothing if setting to empty and not allocated
+    int s=0;
+    if (maxlen) while (s < maxlen && str[s]) s++;
+    else s=(int)strlen(str);
 
-    int olds=(int)strlen(Get());
+    if (!s) return;
 
+    int olds=GetLength();
     char *newbuf=(char*)m_hb.Resize(olds + s + 1,false);
-    if (newbuf)
+    if (m_hb.GetSize() == olds + s + 1)
     {
       memcpy(newbuf + olds, str, s);
       newbuf[olds+s]=0;
@@ -125,18 +143,49 @@
   }
 #endif
 
+  void WDL_STRING_PREFIX Append(const WDL_String *str, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    int s = str->GetLength();
+    if (maxlen && maxlen<s) s=maxlen;
+
+    if (!s) return;
+
+    int olds=GetLength();
+    char *newbuf=(char*)m_hb.Resize(olds + s + 1,false);
+    if (m_hb.GetSize() == olds + s + 1)
+    {
+      memcpy(newbuf + olds, str->Get(), s);
+      newbuf[olds+s]=0;
+    }
+#else
+    Append(str->Get(), maxlen); // might be faster: "partial" strlen
+#endif
+  }
+#endif
+
   void WDL_STRING_PREFIX DeleteSub(int position, int len)
 #ifdef WDL_STRING_INTF_ONLY
     ;
 #else
     {
-	  char *p=Get();
-	  if (!p || !*p) return;
-
-	  int l=(int)strlen(p);
+	  char *p=(char *)m_hb.Get();
+	  if (!m_hb.GetSize() || !*p) return;
+	  int l=GetLength();
 	  if (position < 0 || position >= l) return;
 	  if (position+len > l) len=l-position;
 	  memmove(p+position,p+position+len,l-position-len+1); // +1 for null
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    m_hb.Resize(l+1-len,false);
+#endif
   }
 #endif
 
@@ -150,18 +199,54 @@
     =0)
 #endif
   {
-	  int sl=(int)strlen(Get());
+    int ilen=0;
+    if (maxlen) while (ilen < maxlen && str[ilen]) ilen++;
+    else ilen=(int)strlen(str);
+
+    if (!ilen) return;
+
+	  int sl=GetLength();
 	  if (position > sl) position=sl;
 
-	  int ilen=(int)strlen(str);
-	  if (maxlen > 0 && maxlen < ilen) ilen=maxlen;
+    char *cur = (char*)m_hb.Resize(sl + ilen + 1,false);
+	  if (m_hb.GetSize() == sl + ilen + 1)
+    {
+      memmove(cur+position+ilen,cur+position,sl-position);
+	    memcpy(cur+position,str,ilen);
+	    cur[sl+ilen]=0;
+    }
+  }
+#endif
 
-	  Append(str);
-	  char *cur=Get();
+  void WDL_STRING_PREFIX Insert(const WDL_String *str, int position, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    int ilen = str->GetLength();
+    if (maxlen && maxlen<ilen) ilen=maxlen;
 
-      	  memmove(cur+position+ilen,cur+position,sl-position);
-	  memcpy(cur+position,str,ilen);
-	  cur[sl+ilen]=0;
+    if (!ilen) return;
+
+	  int sl=GetLength();
+	  if (position > sl) position=sl;
+
+    char *cur = (char*)m_hb.Resize(sl + ilen + 1,false);
+    if (m_hb.GetSize() == sl + ilen + 1)
+    {
+      memmove(cur+position+ilen,cur+position,sl-position);
+      memcpy(cur+position,str->Get(),ilen);
+      cur[sl+ilen]=0;
+    }
+#else
+    Insert(str->Get(), position, maxlen); // might be faster: "partial" strlen
+#endif
   }
 #endif
 
@@ -174,9 +259,16 @@
 #else
     =false)
 #endif
-  {                       // can use to resize down, too, or resize up for a sprintf() etc
+  {                       
+    int osz = m_hb.GetSize()?m_hb.GetSize()-1:0;
     char *b=(char*)m_hb.Resize(length+1,resizeDown);
-    if (b) b[length]=0;
+    if (m_hb.GetSize()==length+1) 
+    {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+      if (length > osz) memset(b+osz,' ',length-osz);
+#endif
+      b[length]=0;
+    }
   }
 #endif
 
@@ -186,6 +278,8 @@
 #else
   {
     char* b= (char*) m_hb.Resize(maxlen+1,false);
+    if (m_hb.GetSize() != maxlen+1) return;
+
   	va_list arglist;
 		va_start(arglist, fmt);
     #ifdef _WIN32
@@ -196,6 +290,10 @@
     if (written < 0) written = 0;
 		va_end(arglist);
     b[written] = '\0';
+
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    m_hb.Resize(written+1,false);
+#endif
 	}
 #endif
 
@@ -204,8 +302,10 @@
     ; 
 #else
   {
-    int offs=(int)strlen(Get());
+    int offs=GetLength();
     char* b= (char*) m_hb.Resize(offs+maxlen+1,false)+offs;
+    if (m_hb.GetSize() != offs+maxlen+1) return;
+
   	va_list arglist;
 		va_start(arglist, fmt);
     #ifdef _WIN32
@@ -216,6 +316,11 @@
     if (written < 0) written = 0;
 		va_end(arglist);
     b[written] = '\0';
+
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    m_hb.Resize(offs + written +1,false);
+#endif
+
 	}
 #endif
 
@@ -224,35 +329,64 @@
     ;
 #else
   {
-    char* b = Get();
-    if ((int) strlen(b) > maxlen) {
+    if (m_hb.GetSize() && GetLength() > maxlen) 
+    {
+      char *b = (char *)m_hb.Get();
       int i;
-      for (i = maxlen-4; i >= minlen; --i) {
-        if (b[i] == ' ') {
-          strcpy(b+i, "...");
+      for (i = maxlen-4; i >= minlen; --i) 
+      {
+        if (b[i] == ' ') 
+        {
+          memcpy(b+i, "...",4);
+#ifdef WDL_STRING_FASTSUB_DEFINED
+          m_hb.Resize(i+4,false);
+#endif
           break;
         }
       }
-      if (i < minlen) strcpy(b+maxlen-4, "...");    
+      if (i < minlen && maxlen >= 4) 
+      {
+        memcpy(b+maxlen-4, "...",4);    
+#ifdef WDL_STRING_FASTSUB_DEFINED
+        m_hb.Resize(maxlen,false);
+#endif
+      }
     }
   }
 #endif
 
 #ifndef WDL_STRING_IMPL_ONLY
-  char *Get()
+#ifdef WDL_STRING_FASTSUB_DEFINED
+/*JFB: commented for ascendant compatibility, temporary..
+  const char *Get() const { return m_hb.GetSize()?(char*)m_hb.Get():""; }
+*/
+  char *Get() const { return m_hb.GetSize()?(char*)m_hb.Get():""; }
+  int GetLength() const { int a = m_hb.GetSize(); return a>0?a-1:0; }
+#else
+  char *Get() const
   {
-    char *p=NULL;
-    if (m_hb.GetSize()) p=(char *)m_hb.Get();
-    if (p) return p;
-    static char c; c=0; 
-    return &c; // don't return "", in case it gets written to.
+    if (m_hb.GetSize()) return (char *)m_hb.Get();
+    static char c; c=0; return &c; // don't return "", in case it gets written to.
   }
-  int GetLength() { return (int)strlen(Get()); }
+  int GetLength() const 
+  {
+    return m_hb.GetSize()?(int)strlen((const char*)m_hb.Get()):0;
+  }
+#endif
 
   private:
     WDL_HeapBuf m_hb;
 };
 #endif
 
+#ifndef WDL_STRING_FASTSUB_DEFINED
+#undef _WDL_STRING_H_
+#define WDL_STRING_FASTSUB_DEFINED
+#define WDL_String WDL_FastString
+#include "wdlstring.h"
+#undef WDL_STRING_FASTSUB_DEFINED
+#undef WDL_String
 #endif
 
+#endif
+
--- swell/swell-ini.cpp	Mon Jan 19 16:26:36 1970
+++ swell/swell-ini.cpp	Mon Jan 19 16:26:36 1970
@@ -168,7 +168,15 @@
         {
           *t++=0;
           if (*p) 
+		  {
+			// Mimic Win32 behavior of stripping quotes and whitespace
+			while(*t==' ' || *t=='\t') ++t;
+			char* e = t+strlen(t)-1;
+			while(e >= t && (*e==' ' || *e=='\t')) --e;
+			if (e > t && ((*t=='\"' && *e=='\"') || (*t=='\'' && *e=='\''))) { ++t; --e; }
+			e[1] = 0;
             cursec->AddUnsorted(p,strdup(t));
+		  }
         }
       }
     }
@@ -314,7 +322,7 @@
   int szOut=0;
   WDL_StringKeyedArray<char *> *cursec = ctx ? ctx->m_sections.Get(appname) : NULL;
 
-  if (ctx) 
+  if (ctx && cursec) 
   {
     int x;
     for(x=0;x<cursec->GetSize();x++)
--- wingui/virtwnd-controls.h	Mon Jan 19 16:26:36 1970
+++ wingui/virtwnd-controls.h	Mon Jan 19 16:26:36 1970
@@ -114,7 +114,8 @@
     void SetForceText(bool ft, int color=0) { m_forcetext=ft; m_forcetext_color=color; }
     bool GetForceText() { return m_forcetext; }
 
     void SetFont(LICE_IFont *font, LICE_IFont *vfont=NULL) { m_textfont=font; m_textfontv=vfont; }
+    LICE_IFont *GetFont(bool vfont=false) { return vfont?m_textfontv:m_textfont; }
 
   private:
 
