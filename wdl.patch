--- swell/swell-ini.cpp	Mon Jan 19 16:26:36 1970
+++ swell/swell-ini.cpp	Mon Jan 19 16:26:36 1970
@@ -168,7 +168,15 @@
         {
           *t++=0;
           if (*p) 
+		  {
+			// Mimic Win32 behavior of stripping quotes and whitespace
+			while(*t==' ' || *t=='\t') ++t;
+			char* e = t+strlen(t)-1;
+			while(e >= t && (*e==' ' || *e=='\t')) --e;
+			if (e > t && ((*t=='\"' && *e=='\"') || (*t=='\'' && *e=='\''))) { ++t; --e; }
+			e[1] = 0;
             cursec->AddUnsorted(p,strdup(t));
+		  }
         }
       }
     }
@@ -314,7 +322,7 @@
   int szOut=0;
   WDL_StringKeyedArray<char *> *cursec = ctx ? ctx->m_sections.Get(appname) : NULL;
 
-  if (ctx) 
+  if (ctx && cursec) 
   {
     int x;
     for(x=0;x<cursec->GetSize();x++)
--- wdlstring.h	Mon Jan 19 16:26:36 1970
+++ wdlstring.h	Mon Jan 19 16:26:36 1970
@@ -1,258 +1,361 @@
-/*
-    WDL - wdlstring.h
-    Copyright (C) 2005 and later, Cockos Incorporated
-  
-    This software is provided 'as-is', without any express or implied
-    warranty.  In no event will the authors be held liable for any damages
-    arising from the use of this software.
-
-    Permission is granted to anyone to use this software for any purpose,
-    including commercial applications, and to alter it and redistribute it
-    freely, subject to the following restrictions:
-
-    1. The origin of this software must not be misrepresented; you must not
-       claim that you wrote the original software. If you use this software
-       in a product, an acknowledgment in the product documentation would be
-       appreciated but is not required.
-    2. Altered source versions must be plainly marked as such, and must not be
-       misrepresented as being the original software.
-    3. This notice may not be removed or altered from any source distribution.
-      
-*/
-
-/*
-
-  This file provides a simple class for variable-length string manipulation.
-  It provides only the simplest features, and does not do anything confusing like
-  operator overloading. It uses a WDL_HeapBuf for internal storage.
-
-  You can do Set, Get, Append, Insert, and SetLen.. that's about it
-  
-*/
-
-#ifndef _WDL_STRING_H_
-#define _WDL_STRING_H_
-
-#include "heapbuf.h"
-#include <stdio.h>
-#include <stdarg.h>
-
-#ifndef WDL_STRING_IMPL_ONLY
-class WDL_String
-{
-public:
-  WDL_String(int hbgran) : m_hb(hbgran WDL_HEAPBUF_TRACEPARM("WDL_String(4)"))
-  {
-  }
-  WDL_String(const char *initial=NULL, int initial_len=0) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String"))
-  {
-    if (initial) Set(initial,initial_len);
-  }
-  WDL_String(WDL_String &s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(2)"))
-  {
-    Set(s.Get());
-  }
-  WDL_String(WDL_String *s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(3)"))
-  {
-    if (s && s != this) Set(s->Get());
-  }
-  ~WDL_String()
-  {
-  }
-#define WDL_STRING_PREFIX 
-#else
-#define WDL_STRING_PREFIX WDL_String::
-#endif
-
-  void WDL_STRING_PREFIX Set(const char *str, int maxlen
-#ifdef WDL_STRING_INTF_ONLY
-      =0); 
-#else
-#ifdef WDL_STRING_IMPL_ONLY
-    )
-#else
-    =0)
-#endif
-  {
-    // this would be ideal
-    //int s = (maxlen ? strnlen(str, maxlen) : strlen(str));
-
-    int s;
-    if (maxlen)
-    {    
-      const char* p=str;
-      while (p-str < maxlen && *p) ++p;
-      s=(int) (p-str);
-    }
-    else
-    {
-      s=(int)strlen(str);
-    }
-     
-    if (!s && !m_hb.GetSize()) return; // do nothing if setting to empty and not allocated
-
-    char *newbuf=(char*)m_hb.Resize(s+1,false);
-    if (newbuf) 
-    {
-      memcpy(newbuf,str,s);
-      newbuf[s]=0;
-    }
-  }
-#endif
-
-  void WDL_STRING_PREFIX Append(const char *str, int maxlen
-#ifdef WDL_STRING_INTF_ONLY
-      =0); 
-#else
-#ifdef WDL_STRING_IMPL_ONLY
-    )
-#else
-    =0)
-#endif
-  {
-    int s=(int)strlen(str);
-    if (maxlen && s > maxlen) s=maxlen;
-    if (!s) return; // do nothing if setting to empty and not allocated
-
-    int olds=(int)strlen(Get());
-
-    char *newbuf=(char*)m_hb.Resize(olds + s + 1,false);
-    if (newbuf)
-    {
-      memcpy(newbuf + olds, str, s);
-      newbuf[olds+s]=0;
-    }
-  }
-#endif
-
-  void WDL_STRING_PREFIX DeleteSub(int position, int len)
-#ifdef WDL_STRING_INTF_ONLY
-    ;
-#else
-    {
-	  char *p=Get();
-	  if (!p || !*p) return;
-
-	  int l=(int)strlen(p);
-	  if (position < 0 || position >= l) return;
-	  if (position+len > l) len=l-position;
-	  memmove(p+position,p+position+len,l-position-len+1); // +1 for null
-  }
-#endif
-
-  void WDL_STRING_PREFIX Insert(const char *str, int position, int maxlen
-#ifdef WDL_STRING_INTF_ONLY
-      =0); 
-#else
-#ifdef WDL_STRING_IMPL_ONLY
-    )
-#else
-    =0)
-#endif
-  {
-	  int sl=(int)strlen(Get());
-	  if (position > sl) position=sl;
-
-	  int ilen=(int)strlen(str);
-	  if (maxlen > 0 && maxlen < ilen) ilen=maxlen;
-
-	  Append(str);
-	  char *cur=Get();
-
-      	  memmove(cur+position+ilen,cur+position,sl-position);
-	  memcpy(cur+position,str,ilen);
-	  cur[sl+ilen]=0;
-  }
-#endif
-
-  void WDL_STRING_PREFIX SetLen(int length, bool resizeDown
-#ifdef WDL_STRING_INTF_ONLY
-      =false); 
-#else
-#ifdef WDL_STRING_IMPL_ONLY
-    )
-#else
-    =false)
-#endif
-  {                       // can use to resize down, too, or resize up for a sprintf() etc
-    char *b=(char*)m_hb.Resize(length+1,resizeDown);
-    if (b) b[length]=0;
-  }
-#endif
-
-  void WDL_STRING_PREFIX SetFormatted(int maxlen, const char* fmt, ...) 
-#ifdef WDL_STRING_INTF_ONLY
-    ; 
-#else
-  {
-    char* b= (char*) m_hb.Resize(maxlen+1,false);
-  	va_list arglist;
-		va_start(arglist, fmt);
-    #ifdef _WIN32
-		int written = _vsnprintf(b, maxlen, fmt, arglist);
-    #else
-		int written = vsnprintf(b, maxlen, fmt, arglist);
-    #endif
-    if (written < 0) written = 0;
-		va_end(arglist);
-    b[written] = '\0';
-	}
-#endif
-
-  void WDL_STRING_PREFIX AppendFormatted(int maxlen, const char* fmt, ...) 
-#ifdef WDL_STRING_INTF_ONLY
-    ; 
-#else
-  {
-    int offs=(int)strlen(Get());
-    char* b= (char*) m_hb.Resize(offs+maxlen+1,false)+offs;
-  	va_list arglist;
-		va_start(arglist, fmt);
-    #ifdef _WIN32
-		int written = _vsnprintf(b, maxlen, fmt, arglist);
-    #else
-		int written = vsnprintf(b, maxlen, fmt, arglist);
-    #endif
-    if (written < 0) written = 0;
-		va_end(arglist);
-    b[written] = '\0';
-	}
-#endif
-
-  void WDL_STRING_PREFIX Ellipsize(int minlen, int maxlen)
-#ifdef WDL_STRING_INTF_ONLY
-    ;
-#else
-  {
-    char* b = Get();
-    if ((int) strlen(b) > maxlen) {
-      int i;
-      for (i = maxlen-4; i >= minlen; --i) {
-        if (b[i] == ' ') {
-          strcpy(b+i, "...");
-          break;
-        }
-      }
-      if (i < minlen) strcpy(b+maxlen-4, "...");    
-    }
-  }
-#endif
-
-#ifndef WDL_STRING_IMPL_ONLY
-  char *Get()
-  {
-    char *p=NULL;
-    if (m_hb.GetSize()) p=(char *)m_hb.Get();
-    if (p) return p;
-    static char c; c=0; 
-    return &c; // don't return "", in case it gets written to.
-  }
-  int GetLength() { return (int)strlen(Get()); }
-
-  private:
-    WDL_HeapBuf m_hb;
-};
-#endif
-
-#endif
-
+/*
+    WDL - wdlstring.h
+    Copyright (C) 2005 and later, Cockos Incorporated
+  
+    This software is provided 'as-is', without any express or implied
+    warranty.  In no event will the authors be held liable for any damages
+    arising from the use of this software.
+
+    Permission is granted to anyone to use this software for any purpose,
+    including commercial applications, and to alter it and redistribute it
+    freely, subject to the following restrictions:
+
+    1. The origin of this software must not be misrepresented; you must not
+       claim that you wrote the original software. If you use this software
+       in a product, an acknowledgment in the product documentation would be
+       appreciated but is not required.
+    2. Altered source versions must be plainly marked as such, and must not be
+       misrepresented as being the original software.
+    3. This notice may not be removed or altered from any source distribution.
+      
+*/
+
+/*
+
+  This file provides a simple class for variable-length string manipulation.
+  It provides only the simplest features, and does not do anything confusing like
+  operator overloading. It uses a WDL_HeapBuf for internal storage.
+
+  You can do Set, Get, Append, Insert, and SetLen.. that's about it
+  
+*/
+
+#ifndef _WDL_STRING_H_
+#define _WDL_STRING_H_
+
+#include "heapbuf.h"
+#include <stdio.h>
+#include <stdarg.h>
+
+#ifndef WDL_STRING_IMPL_ONLY
+class WDL_String
+{
+public:
+  WDL_String(int hbgran) : m_hb(hbgran WDL_HEAPBUF_TRACEPARM("WDL_String(4)"))
+  {
+  }
+  WDL_String(const char *initial=NULL, int initial_len=0) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String"))
+  {
+    if (initial) Set(initial,initial_len);
+  }
+  WDL_String(const WDL_String &s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(2)"))
+  {
+    Set(&s);
+  }
+  WDL_String(const WDL_String *s) : m_hb(128 WDL_HEAPBUF_TRACEPARM("WDL_String(3)"))
+  {
+    if (s && s != this) Set(s);
+  }
+  ~WDL_String()
+  {
+  }
+#define WDL_STRING_PREFIX 
+#else
+#define WDL_STRING_PREFIX WDL_String::
+#endif
+
+  void WDL_STRING_PREFIX Set(const char *str, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+    int s=0;
+    if (maxlen>0) while (s < maxlen && str[s]) s++;
+    else s=(int)strlen(str);   
+    __doSet(0,str,s,false);
+  }
+#endif
+
+  void WDL_STRING_PREFIX Set(const WDL_String *str, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    int s = str->GetLength();
+    if (maxlen>0 && maxlen<s) s=maxlen;
+
+    __doSet(0,str->Get(),s,false);
+#else
+    Set(str->Get(), maxlen); // might be faster: "partial" strlen
+#endif
+  }
+#endif
+
+  void WDL_STRING_PREFIX Append(const char *str, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+    int s=0;
+    if (maxlen>0) while (s < maxlen && str[s]) s++;
+    else s=(int)strlen(str);
+
+    __doSet(GetLength(),str,s,false);
+  }
+#endif
+
+  void WDL_STRING_PREFIX Append(const WDL_String *str, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    int s = str->GetLength();
+    if (maxlen>0 && maxlen<s) s=maxlen;
+
+    __doSet(GetLength(),str->Get(),s,false);
+#else
+    Append(str->Get(), maxlen); // might be faster: "partial" strlen
+#endif
+  }
+#endif
+
+  void WDL_STRING_PREFIX DeleteSub(int position, int len)
+#ifdef WDL_STRING_INTF_ONLY
+    ;
+#else
+    {
+	  char *p=(char *)m_hb.Get();
+	  if (!m_hb.GetSize() || !*p) return;
+	  int l=m_hb.GetSize()-1;
+	  if (position < 0 || position >= l) return;
+	  if (position+len > l) len=l-position;
+    if (len>0)
+    {
+  	  memmove(p+position,p+position+len,l-position-len+1);
+      m_hb.Resize(l+1-len,false);
+    }
+  }
+#endif
+
+  void WDL_STRING_PREFIX Insert(const char *str, int position, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+    int ilen=0;
+    if (maxlen>0) while (ilen < maxlen && str[ilen]) ilen++;
+    else ilen=(int)strlen(str);
+
+    int srclen = GetLength();
+    if (position<0) position=0;
+    else if (position>srclen) position=srclen;
+    if (ilen>0) __doSet(position,str,ilen,srclen-position);
+  }
+#endif
+
+  void WDL_STRING_PREFIX Insert(const WDL_String *str, int position, int maxlen
+#ifdef WDL_STRING_INTF_ONLY
+      =0); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =0)
+#endif
+  {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+    int ilen = str->GetLength();
+    if (maxlen>0 && maxlen<ilen) ilen=maxlen;
+
+    int srclen = m_hb.GetSize()>0 ? m_hb.GetSize()-1 : 0;
+    if (position<0) position=0;
+    else if (position>srclen) position=srclen;
+    if (ilen>0) __doSet(position,str->Get(),ilen,srclen-position);
+#else
+    Insert(str->Get(), position, maxlen); // might be faster: "partial" strlen
+#endif
+  }
+#endif
+
+  void WDL_STRING_PREFIX SetLen(int length, bool resizeDown
+#ifdef WDL_STRING_INTF_ONLY
+      =false); 
+#else
+#ifdef WDL_STRING_IMPL_ONLY
+    )
+#else
+    =false)
+#endif
+  {                       
+    int osz = m_hb.GetSize()?m_hb.GetSize()-1:0;
+    char *b=(char*)m_hb.Resize(length+1,resizeDown);
+    if (m_hb.GetSize()==length+1) 
+    {
+#ifdef WDL_STRING_FASTSUB_DEFINED
+      if (length > osz) memset(b+osz,' ',length-osz);
+#endif
+      b[length]=0;
+    }
+  }
+#endif
+
+  void WDL_STRING_PREFIX SetFormatted(int maxlen, const char* fmt, ...) 
+#ifdef WDL_STRING_INTF_ONLY
+    ; 
+#else
+  {
+    char* b= (char*) m_hb.Resize(maxlen+1,false);
+    if (m_hb.GetSize() != maxlen+1) return;
+
+  	va_list arglist;
+		va_start(arglist, fmt);
+    #ifdef _WIN32
+		int written = _vsnprintf(b, maxlen, fmt, arglist);
+    #else
+		int written = vsnprintf(b, maxlen, fmt, arglist);
+    #endif
+    if (written < 0) written = 0;
+		va_end(arglist);
+    b[written] = '\0';
+
+    m_hb.Resize(written+1,false);
+	}
+#endif
+
+  void WDL_STRING_PREFIX AppendFormatted(int maxlen, const char* fmt, ...) 
+#ifdef WDL_STRING_INTF_ONLY
+    ; 
+#else
+  {
+    int offs=GetLength();
+    char* b= (char*) m_hb.Resize(offs+maxlen+1,false)+offs;
+    if (m_hb.GetSize() != offs+maxlen+1) return;
+
+  	va_list arglist;
+		va_start(arglist, fmt);
+    #ifdef _WIN32
+		int written = _vsnprintf(b, maxlen, fmt, arglist);
+    #else
+		int written = vsnprintf(b, maxlen, fmt, arglist);
+    #endif
+    if (written < 0) written = 0;
+		va_end(arglist);
+    b[written] = '\0';
+
+    m_hb.Resize(offs + written +1,false);
+	}
+#endif
+
+  void WDL_STRING_PREFIX Ellipsize(int minlen, int maxlen)
+#ifdef WDL_STRING_INTF_ONLY
+    ;
+#else
+  {
+    if (maxlen >= 4 && m_hb.GetSize() && GetLength() > maxlen) 
+    {
+      if (minlen<0) minlen=0;
+      char *b = (char *)m_hb.Get();
+      int i;
+      for (i = maxlen-4; i >= minlen; --i) 
+      {
+        if (b[i] == ' ') 
+        {
+          memcpy(b+i, "...",4);
+          m_hb.Resize(i+4,false);
+          break;
+        }
+      }
+      if (i < minlen) 
+      {
+        memcpy(b+maxlen-4, "...",4);    
+        m_hb.Resize(maxlen,false);
+      }
+    }
+  }
+#endif
+
+#ifndef WDL_STRING_IMPL_ONLY
+#ifdef WDL_STRING_FASTSUB_DEFINED
+/*JFB commented for SWS compatibility, temporary..
+  const char *Get() const { return m_hb.GetSize()?(char*)m_hb.Get():""; }
+*/
+  char *Get() const
+  {
+    if (m_hb.GetSize()) return (char *)m_hb.Get();
+    static char c; c=0; return &c; // don't return "", in case it gets written to.
+  }
+  int GetLength() const { int a = m_hb.GetSize(); return a>0?a-1:0; }
+#else
+  char *Get() const
+  {
+    if (m_hb.GetSize()) return (char *)m_hb.Get();
+    static char c; c=0; return &c; // don't return "", in case it gets written to.
+  }
+  int GetLength() const 
+  {
+    return m_hb.GetSize()?(int)strlen((const char*)m_hb.Get()):0;
+  }
+#endif
+
+  private:
+
+
+    void __doSet(int offs, const char *str, int len, int trailkeep)
+#ifdef WDL_STRING_INTF_ONLY
+    ; 
+#else
+    {   
+      if (len>0 || (!trailkeep && !offs && m_hb.GetSize()>1)) // if non-empty, or (empty and allocated and Set() rather than append/insert), then allow update, otherwise do nothing
+      {
+        char *newbuf=(char*)m_hb.Resize(offs+len+trailkeep+1,false);
+        if (m_hb.GetSize()==offs+len+trailkeep+1) 
+        {
+          if (trailkeep>0) memmove(newbuf+offs+len,newbuf+offs,trailkeep);
+          memcpy(newbuf+offs,str,len);
+          newbuf[offs+len+trailkeep]=0;
+        }
+      }
+    }
+#endif
+    WDL_HeapBuf m_hb;
+};
+#endif
+
+#ifndef WDL_STRING_FASTSUB_DEFINED
+#undef _WDL_STRING_H_
+#define WDL_STRING_FASTSUB_DEFINED
+#define WDL_String WDL_FastString
+#include "wdlstring.h"
+#undef WDL_STRING_FASTSUB_DEFINED
+#undef WDL_String
+#endif
+
+#endif
+
--- wingui/virtwnd-controls.h	Mon Jan 19 16:26:36 1970
+++ wingui/virtwnd-controls.h	Mon Jan 19 16:26:36 1970
@@ -115,6 +115,7 @@
     bool GetForceText() { return m_forcetext; }
 
     void SetFont(LICE_IFont *font, LICE_IFont *vfont=NULL) { m_textfont=font; m_textfontv=vfont; }
+    LICE_IFont *GetFont(bool vfont=false) { return vfont?m_textfontv:m_textfont; }
 
   private:
 
